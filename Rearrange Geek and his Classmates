/*Geek and his classmates are playing a prank on their Computer Science teacher. They change places every time the teacher turns to look at the blackboard. 

Each of the N students in the class can be identified by a unique roll number X and each desk has a number i associated with it. Only one student can sit on one desk. 
Each time the teacher turns her back, a student with roll number X sitting on desk number i gets up and takes the place of the student with roll number i.

If the current position of N students in the class is given to you in an array, such that i is the desk number and a[i] is the roll number of the student sitting on the desk, can you modify a[ ] to represent the next position of all the students ? 

*/

/*Input:
N = 6
a[] = {0, 5, 1, 2, 4, 3}
Output: 0 3 5 1 4 2
Explanation: After reshuffling, the modified 
position of all the students would be 
{0, 3, 5, 1, 4, 2}.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)
 

Constraints:
1 ≤ N ≤ 105
0 ≤ a[i] ≤ N-1

https://practice.geeksforgeeks.org/problems/47e5aa3f32aee9e0405f04960f37c8a562d96a2f/1/?track=30-DOC-day-1&batchId=320
*/

// brute force:

 void prank(long[] ar, int n)  
    { 
        long[] ar2 = new long[n];
        for(int i = 0; i < n; i++) {
            int tmp = (int)ar[i];
            ar2[i] = ar[tmp];
        }
        
        for(int i = 0; i < n; i++) {
            ar[i] = ar2[i];
        }
    }
    
   // optimal as per the requirement
   
   void prank(long[] ar, int n)  
    { 
        for(int i = 0; i < n; i++) {
            ar[i] += (ar[(int)ar[i]]%n)*n;  // 
        }
        for(int i = 0; i < n; i++) {
            ar[i] = ar[i]/n;
        }
    }
